<?php
/**
 * Order
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Server\Model
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Swagger Petstore
 *
 * This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Server\Model;

use \ArrayAccess;

/**
 * Class representing the Order model.
 *
 * @package Swagger\Server\Model
 * @author  Swagger Codegen team
 */
class Order implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $_name = 'Order';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var array[]
      */
    protected static $_attributes = [
        'id' => ['id', 'int', 'int64', 'setId', 'getId'],
        'pet_id' => ['petId', 'int', 'int64', 'setPetId', 'getPetId'],
        'quantity' => ['quantity', 'int', 'int32', 'setQuantity', 'getQuantity'],
        'ship_date' => ['shipDate', '\DateTime', 'date-time', 'setShipDate', 'getShipDate'],
        'status' => ['status', 'string', null, 'setStatus', 'getStatus'],
        'complete' => ['complete', 'bool', null, 'setComplete', 'isComplete'],
    ];
    

    /**
     * Allowed values of status
     */
    const STATUS_PLACED = 'placed';
    const STATUS_APPROVED = 'approved';
    const STATUS_DELIVERED = 'delivered';

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_PLACED,
            self::STATUS_APPROVED,
            self::STATUS_DELIVERED,
        ];
    }
    
    /**     * @var int|null
     */
    protected $id;

    /**     * @var int|null
     */
    protected $pet_id;

    /**     * @var int|null
     */
    protected $quantity;

    /**     * @var \DateTime|null
     */
    protected $ship_date;

    /**
     * Order Status
     *
     * @var string|null
     */
    protected $status;

    /**     * @var bool|null
     */
    protected $complete;

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->id = isset($data['id']) ? $data['id'] : null;
        $this->pet_id = isset($data['pet_id']) ? $data['pet_id'] : null;
        $this->quantity = isset($data['quantity']) ? $data['quantity'] : null;
        $this->ship_date = isset($data['ship_date']) ? $data['ship_date'] : null;
        $this->status = isset($data['status']) ? $data['status'] : null;
        $this->complete = isset($data['complete']) ? $data['complete'] : false;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        $allowedValues = $this->getStatusAllowableValues();
        if (!in_array($this->status, $allowedValues, true)) {
            $invalid_properties[] = sprintf(
                "invalid value for 'status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalid_properties;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function modelName() {
        return self::$_name;
    }

    /**
     * Array of property to mappings.
     *
     * @return array[]
     */
    public function modelAttributes() {
        
        return self::$_attributes;
    }

    /**
     * Validate all the properties in the model
     *
     * Return true if all passed.
     *
     * @return bool True if all properties are valid
     */
    public function isValid()
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!in_array($this->status, $allowedValues)) {
            return false;
        }
        return true;
    }


    /**
     * Gets id.
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Sets id.
     *
     * @param int|null $id
     *
     * @return $this
     */
    public function setId($id = null)
    {
        $this->id = $id;

        return $this;
    }

    /**
     * Gets pet_id.
     *
     * @return int|null
     */
    public function getPetId()
    {
        return $this->pet_id;
    }

    /**
     * Sets pet_id.
     *
     * @param int|null $pet_id
     *
     * @return $this
     */
    public function setPetId($pet_id = null)
    {
        $this->pet_id = $pet_id;

        return $this;
    }

    /**
     * Gets quantity.
     *
     * @return int|null
     */
    public function getQuantity()
    {
        return $this->quantity;
    }

    /**
     * Sets quantity.
     *
     * @param int|null $quantity
     *
     * @return $this
     */
    public function setQuantity($quantity = null)
    {
        $this->quantity = $quantity;

        return $this;
    }

    /**
     * Gets ship_date.
     *
     * @return \DateTime|null
     */
    public function getShipDate()
    {
        return $this->ship_date;
    }

    /**
     * Sets ship_date.
     *
     * @param \DateTime|null $ship_date
     *
     * @return $this
     */
    public function setShipDate($ship_date = null)
    {
        $this->ship_date = $ship_date;

        return $this;
    }

    /**
     * Gets status.
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->status;
    }

    /**
     * Sets status.
     *
     * @param string|null $status  Order Status
     *
     * @return $this
     */
    public function setStatus($status = null)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if ($status !== null && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->status = $status;

        return $this;
    }

    /**
     * Gets complete.
     *
     * @return bool|null
     */
    public function isComplete()
    {
        return $this->complete;
    }

    /**
     * Sets complete.
     *
     * @param bool|null $complete
     *
     * @return $this
     */
    public function setComplete($complete = null)
    {
        $this->complete = $complete;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->$offset) ? $this->$offset : null;
    }

    /**
     * Sets value based on offset.
     * @param  string  $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        $this->$offset = null;
    }
}


