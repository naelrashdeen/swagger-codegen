<?php
/**
 * Pet
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Server\Model
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Swagger Petstore
 *
 * This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Server\Model;

use \ArrayAccess;
use Swagger\Server\Model\Tag;
use Swagger\Server\Model\Category;

/**
 * Class representing the Pet model.
 *
 * @package Swagger\Server\Model
 * @author  Swagger Codegen team
 */
class Pet implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $_name = 'Pet';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var array[]
      */
    protected static $_attributes = [
        'id' => ['id', 'int', 'int64', 'setId', 'getId'],
        'category' => ['category', 'Swagger\Server\Model\Category', null, 'setCategory', 'getCategory'],
        'name' => ['name', 'string', null, 'setName', 'getName'],
        'photo_urls' => ['photoUrls', 'string[]', null, 'setPhotoUrls', 'getPhotoUrls'],
        'tags' => ['tags', 'Swagger\Server\Model\Tag[]', null, 'setTags', 'getTags'],
        'status' => ['status', 'string', null, 'setStatus', 'getStatus'],
    ];
    

    /**
     * Allowed values of status
     */
    const STATUS_AVAILABLE = 'available';
    const STATUS_PENDING = 'pending';
    const STATUS_SOLD = 'sold';

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_AVAILABLE,
            self::STATUS_PENDING,
            self::STATUS_SOLD,
        ];
    }
    
    /**     * @var int|null
     */
    protected $id;

    /**     * @var Category|null
     */
    protected $category;

    /**     * @var string
     */
    protected $name;

    /**     * @var string[]
     */
    protected $photo_urls;

    /**     * @var Tag[]|null
     */
    protected $tags;

    /**
     * pet status in the store
     *
     * @var string|null
     */
    protected $status;

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->id = isset($data['id']) ? $data['id'] : null;
        $this->category = isset($data['category']) ? $data['category'] : null;
        $this->name = isset($data['name']) ? $data['name'] : null;
        $this->photo_urls = isset($data['photo_urls']) ? $data['photo_urls'] : null;
        $this->tags = isset($data['tags']) ? $data['tags'] : null;
        $this->status = isset($data['status']) ? $data['status'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->name === null) {
            $invalid_properties[] = "'name' can't be null";
        }
        if ($this->photo_urls === null) {
            $invalid_properties[] = "'photo_urls' can't be null";
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!in_array($this->status, $allowedValues, true)) {
            $invalid_properties[] = sprintf(
                "invalid value for 'status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalid_properties;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function modelName() {
        return self::$_name;
    }

    /**
     * Array of property to mappings.
     *
     * @return array[]
     */
    public function modelAttributes() {
        
        return self::$_attributes;
    }

    /**
     * Validate all the properties in the model
     *
     * Return true if all passed.
     *
     * @return bool True if all properties are valid
     */
    public function isValid()
    {
        if ($this->name === null) {
            return false;
        }
        if ($this->photo_urls === null) {
            return false;
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!in_array($this->status, $allowedValues)) {
            return false;
        }
        return true;
    }


    /**
     * Gets id.
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Sets id.
     *
     * @param int|null $id
     *
     * @return $this
     */
    public function setId($id = null)
    {
        $this->id = $id;

        return $this;
    }

    /**
     * Gets category.
     *
     * @return Category|null
     */
    public function getCategory()
    {
        return $this->category;
    }

    /**
     * Sets category.
     *
     * @param Category|null $category
     *
     * @return $this
     */
    public function setCategory(Category $category = null)
    {
        $this->category = $category;

        return $this;
    }

    /**
     * Gets name.
     *
     * @return string
     */
    public function getName()
    {
        return $this->name;
    }

    /**
     * Sets name.
     *
     * @param string $name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->name = $name;

        return $this;
    }

    /**
     * Gets photo_urls.
     *
     * @return string[]
     */
    public function getPhotoUrls()
    {
        return $this->photo_urls;
    }

    /**
     * Sets photo_urls.
     *
     * @param string[] $photo_urls
     *
     * @return $this
     */
    public function setPhotoUrls($photo_urls)
    {
        $this->photo_urls = $photo_urls;

        return $this;
    }

    /**
     * Gets tags.
     *
     * @return Tag[]|null
     */
    public function getTags()
    {
        return $this->tags;
    }

    /**
     * Sets tags.
     *
     * @param Tag[]|null $tags
     *
     * @return $this
     */
    public function setTags(array $tags = null)
    {
        $this->tags = $tags;

        return $this;
    }

    /**
     * Gets status.
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->status;
    }

    /**
     * Sets status.
     *
     * @param string|null $status  pet status in the store
     *
     * @return $this
     */
    public function setStatus($status = null)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if ($status !== null && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->status = $status;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->$offset) ? $this->$offset : null;
    }

    /**
     * Sets value based on offset.
     * @param  string  $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        $this->$offset = null;
    }
}


