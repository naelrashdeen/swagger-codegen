<?php
/**
 * UserApiInterface
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Server
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Swagger Petstore
 *
 * This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Server\Api;

use Swagger\Server\Model\User[];
use string;
use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;
use Swagger\Server\Model\User;
use Symfony\Component\HttpKernel\Exception\BadRequestHttpException;

/**
 * UserApiInterface Interface Doc Comment
 *
 * @category Interface
 * @package  Swagger\Server\Api
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
interface UserApiInterface
{

    /**
     * Operation createUser
     *
     * Create user
     *
     * @param  User $body  Created user object (required)
     *
     * @return void  successful operation
     *
     */
    public function createUser(User $body);

    /**
     * Operation createUsersWithArrayInput
     *
     * Creates list of users with given input array
     *
     * @param  User[] $body  List of user object (required)
     *
     * @return void  successful operation
     *
     */
    public function createUsersWithArrayInput(User[] $body);

    /**
     * Operation createUsersWithListInput
     *
     * Creates list of users with given input array
     *
     * @param  User[] $body  List of user object (required)
     *
     * @return void  successful operation
     *
     */
    public function createUsersWithListInput(User[] $body);

    /**
     * Operation deleteUser
     *
     * Delete user
     *
     * @param  string $username  The name that needs to be deleted (required)
     *
     * @throws BadRequestHttpException  Invalid username supplied
     * @throws NotFoundHttpException  User not found
     */
    public function deleteUser($username);

    /**
     * Operation getUserByName
     *
     * Get user by user name
     *
     * @param  string $username  The name that needs to be fetched. Use user1 for testing. (required)
     *
     * @return User  successful operation
     *
     * @throws BadRequestHttpException  Invalid username supplied
     * @throws NotFoundHttpException  User not found
     */
    public function getUserByName($username);

    /**
     * Operation loginUser
     *
     * Logs user into the system
     *
     * @param  string $username  The user name for login (required)
     * @param  string $password  The password for login in clear text (required)
     *
     * @return string  successful operation
     *
     * @throws BadRequestHttpException  Invalid username/password supplied
     */
    public function loginUser($username, $password);

    /**
     * Operation logoutUser
     *
     * Logs out current logged in user session
     *
     *
     * @return void  successful operation
     *
     */
    public function logoutUser();

    /**
     * Operation updateUser
     *
     * Updated user
     *
     * @param  string $username  name that need to be updated (required)
     * @param  User $body  Updated user object (required)
     *
     * @throws BadRequestHttpException  Invalid user supplied
     * @throws NotFoundHttpException  User not found
     */
    public function updateUser($username, User $body);
}
