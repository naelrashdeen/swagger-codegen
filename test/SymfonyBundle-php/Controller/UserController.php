<?php

/**
 * UserController
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Server\Controller
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Swagger Petstore
 *
 * This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Server\Controller;

use \Exception;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\HttpKernel\Exception\HttpException;
use Swagger\Server\Api\UserApiInterface;
use Swagger\Server\Model\User[];
use string;
use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;
use Swagger\Server\Model\User;
use Symfony\Component\HttpKernel\Exception\BadRequestHttpException;

/**
 * UserController Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Server\Controller
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class UserController extends Controller
{

    /**
     * Operation createUser
     *
     * Create user
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function createUserAction(Request $request)
    {
        // Handle body params
        $body = $this->deserialize($request->getContent(), 'Swagger\Server\Model\User', 'json');

        // Parse incoming parameters
        // Verify the required parameter 'body' is set
        if ($body === null) {
            return $this->createBadRequestResponse('Missing the required parameter $body when calling createUser');
        }

        // Call the API interface
        try {
            $handler = $this->getApiHandler();

            // No return type expected; return empty response
            $handler->createUser($body);
            return new Response('', 204);
        } catch (Exception $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation createUsersWithArrayInput
     *
     * Creates list of users with given input array
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function createUsersWithArrayInputAction(Request $request)
    {
        // Handle body params
        $body = $this->deserialize($request->getContent(), 'Swagger\Server\Model\User[]', 'json');

        // Parse incoming parameters
        // Verify the required parameter 'body' is set
        if ($body === null) {
            return $this->createBadRequestResponse('Missing the required parameter $body when calling createUsersWithArrayInput');
        }

        // Call the API interface
        try {
            $handler = $this->getApiHandler();

            // No return type expected; return empty response
            $handler->createUsersWithArrayInput($body);
            return new Response('', 204);
        } catch (Exception $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation createUsersWithListInput
     *
     * Creates list of users with given input array
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function createUsersWithListInputAction(Request $request)
    {
        // Handle body params
        $body = $this->deserialize($request->getContent(), 'Swagger\Server\Model\User[]', 'json');

        // Parse incoming parameters
        // Verify the required parameter 'body' is set
        if ($body === null) {
            return $this->createBadRequestResponse('Missing the required parameter $body when calling createUsersWithListInput');
        }

        // Call the API interface
        try {
            $handler = $this->getApiHandler();

            // No return type expected; return empty response
            $handler->createUsersWithListInput($body);
            return new Response('', 204);
        } catch (Exception $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation deleteUser
     *
     * Delete user
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function deleteUserAction(Request $request)
    {
        // Handle path params
        $username = $this->fromPath($request->attributes->get('username'), 'string');

        // Parse incoming parameters
        // Verify the required parameter 'username' is set
        if ($username === null) {
            return $this->createBadRequestResponse('Missing the required parameter $username when calling deleteUser');
        }

        // Call the API interface
        try {
            $handler = $this->getApiHandler();

            // No return type expected; return empty response
            $handler->deleteUser($username);
            return new Response('', 204);
        } catch (BadRequestHttpException $exception) {
            // Invalid username supplied
            return $this->createErrorResponse($exception);
        } catch (NotFoundHttpException $exception) {
            // User not found
            return $this->createErrorResponse($exception);
        } catch (Exception $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation getUserByName
     *
     * Get user by user name
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function getUserByNameAction(Request $request)
    {
        // Handle path params
        $username = $this->fromPath($request->attributes->get('username'), 'string');

        // Parse incoming parameters
        // Verify the required parameter 'username' is set
        if ($username === null) {
            return $this->createBadRequestResponse('Missing the required parameter $username when calling getUserByName');
        }

        // Call the API interface
        try {
            $handler = $this->getApiHandler();

            // Expecting a return value (exception otherwise)
            $result = $handler->getUserByName($username);

            // Handle 200 response: successful operation
            $content = $this->serialize($result, 'json');
            return new Response($content, 200, [
                'Content-Type' => 'application/json',
                'X-Swagger-Message' => 'successful operation',
            ]);
        } catch (BadRequestHttpException $exception) {
            // Invalid username supplied
            return $this->createErrorResponse($exception);
        } catch (NotFoundHttpException $exception) {
            // User not found
            return $this->createErrorResponse($exception);
        } catch (Exception $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation loginUser
     *
     * Logs user into the system
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function loginUserAction(Request $request)
    {
        // Handle query params
        $username = $this->fromQuery($request->query->get('username'), 'string');
        // Handle query params
        $password = $this->fromQuery($request->query->get('password'), 'string');

        // Parse incoming parameters
        // Verify the required parameter 'username' is set
        if ($username === null) {
            return $this->createBadRequestResponse('Missing the required parameter $username when calling loginUser');
        }
        // Verify the required parameter 'password' is set
        if ($password === null) {
            return $this->createBadRequestResponse('Missing the required parameter $password when calling loginUser');
        }

        // Call the API interface
        try {
            $handler = $this->getApiHandler();

            // Expecting a return value (exception otherwise)
            $result = $handler->loginUser($username, $password);

            // Handle 200 response: successful operation
            $content = $this->serialize($result, 'json');
            return new Response($content, 200, [
                'Content-Type' => 'application/json',
                'X-Swagger-Message' => 'successful operation',
            ]);
        } catch (BadRequestHttpException $exception) {
            // Invalid username/password supplied
            return $this->createErrorResponse($exception);
        } catch (Exception $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation logoutUser
     *
     * Logs out current logged in user session
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function logoutUserAction(Request $request)
    {

        // Parse incoming parameters

        // Call the API interface
        try {
            $handler = $this->getApiHandler();

            // No return type expected; return empty response
            $handler->logoutUser();
            return new Response('', 204);
        } catch (Exception $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation updateUser
     *
     * Updated user
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function updateUserAction(Request $request)
    {
        // Handle path params
        $username = $this->fromPath($request->attributes->get('username'), 'string');
        // Handle body params
        $body = $this->deserialize($request->getContent(), 'Swagger\Server\Model\User', 'json');

        // Parse incoming parameters
        // Verify the required parameter 'username' is set
        if ($username === null) {
            return $this->createBadRequestResponse('Missing the required parameter $username when calling updateUser');
        }
        // Verify the required parameter 'body' is set
        if ($body === null) {
            return $this->createBadRequestResponse('Missing the required parameter $body when calling updateUser');
        }

        // Call the API interface
        try {
            $handler = $this->getApiHandler();

            // No return type expected; return empty response
            $handler->updateUser($username, $body);
            return new Response('', 204);
        } catch (BadRequestHttpException $exception) {
            // Invalid user supplied
            return $this->createErrorResponse($exception);
        } catch (NotFoundHttpException $exception) {
            // User not found
            return $this->createErrorResponse($exception);
        } catch (Exception $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Returns the handler for this API controller.
     * @return UserApiInterface
     */
    public function getApiHandler()
    {
        return $this->get('swagger_server.api.api_server')->getApiHandler('user');
    }
}
