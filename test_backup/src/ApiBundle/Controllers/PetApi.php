<?php

/**
 * Swagger Petstore
 * This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


namespace Controllers;

use Symfony\Component\Validator\Constraints as Assert;
use Symfony\Component\Validator\Validator\ValidatorInterface;
use JMS\Serializer\Serializer;
use Symfony\Component\HttpKernel\Exception\BadRequestHttpException;
// Need proper path to the ServiceInterface...
use PetApiServiceInterface;


class PetApi
{
    private $PetService;
    private $validator;
    private $serializer;

    public function setPetService(PetApiServiceInterface $service)
    {
        $this->PetService = $service;
    }

    public function setValidator(ValidatorInterface $validator)
    {
        $this->validator = $validator;
    }

    public function setSerializer(Serializer $serializer)
    {
        $this->serializer = $serializer;
    }

    /**
     * Operation addPet
     * Add a new pet to the store.
     *
     */
    public function addPet(Request $request)
    {
        $inputData = [];
        // Unwrap parameter value
        $inputData['body'] = $request->request->get('body');

        $asserts = [];

        $asserts[] = new Assert\Type("\Model\Pet");

        // Validate input parameter
        $this->validateData($inputData['body'], $asserts);


        // Call business logic with input data array.
        $output = $this->PetApiService->addPet($inputData);

        $validResponses = [];

        $assertsOutput = [];


        $validResponses['405'] = [
            'message'   => 'Invalid input',
            'assertsOutput'  => $assertsOutput
        ];

        if (isset($validResponses[$output->responseCode])) {
            // Get the response type indicated by the business logic
            $response = $validResponses[$output->responseCode];
        } elseif (isset($validResponses['default'])) {
            $response = $validResponses['default'];
        } else {
            // We don't recognize this reponse type from the spec
            return new Response($output->data, $output->responseCode);
        }

        // Check if we have a schema defined for the response type
        if (!empty($response['assertsOutput'])) {
            // Validate response type
            $this->validateData($output->data, $response['assertsOutput']);
        }

        // Determine what to return as the response
        if (!empty($output->data)) {
            $responseData = $this->produceOutput($request, $output->data);
        } else {
            $responseData = $response['message'];
        }

        // Return response
        return new Response($responseData, $output->responseCode);
    }
    /**
     * Operation updatePet
     * Update an existing pet.
     *
     */
    public function updatePet(Request $request)
    {
        $inputData = [];
        // Unwrap parameter value
        $inputData['body'] = $request->request->get('body');

        $asserts = [];

        $asserts[] = new Assert\Type("\Model\Pet");

        // Validate input parameter
        $this->validateData($inputData['body'], $asserts);


        // Call business logic with input data array.
        $output = $this->PetApiService->updatePet($inputData);

        $validResponses = [];

        $assertsOutput = [];


        $validResponses['400'] = [
            'message'   => 'Invalid ID supplied',
            'assertsOutput'  => $assertsOutput
        ];


        $validResponses['404'] = [
            'message'   => 'Pet not found',
            'assertsOutput'  => $assertsOutput
        ];


        $validResponses['405'] = [
            'message'   => 'Validation exception',
            'assertsOutput'  => $assertsOutput
        ];

        if (isset($validResponses[$output->responseCode])) {
            // Get the response type indicated by the business logic
            $response = $validResponses[$output->responseCode];
        } elseif (isset($validResponses['default'])) {
            $response = $validResponses['default'];
        } else {
            // We don't recognize this reponse type from the spec
            return new Response($output->data, $output->responseCode);
        }

        // Check if we have a schema defined for the response type
        if (!empty($response['assertsOutput'])) {
            // Validate response type
            $this->validateData($output->data, $response['assertsOutput']);
        }

        // Determine what to return as the response
        if (!empty($output->data)) {
            $responseData = $this->produceOutput($request, $output->data);
        } else {
            $responseData = $response['message'];
        }

        // Return response
        return new Response($responseData, $output->responseCode);
    }
    /**
     * Operation findPetsByStatus
     * Finds Pets by status.
     *
     * @return \Model\Pet[]
     */
    public function findPetsByStatus(Request $request)
    {
        $inputData = [];
        // Unwrap parameter value
        $inputData['status'] = $request->query->get('status');

        $asserts = [];

        $asserts[] = new Assert\All([
            new Assert\Type("string[]")
        ]);

        // Validate input parameter
        $this->validateData($inputData['status'], $asserts);


        // Call business logic with input data array.
        $output = $this->PetApiService->findPetsByStatus($inputData);

        $validResponses = [];

        $assertsOutput = [];

        $assertsOutput[] = new Assert\All([
            new Assert\Type("\Model\Pet[]")
        ]);

        $validResponses['200'] = [
            'message'   => 'successful operation',
            'assertsOutput'  => $assertsOutput
        ];


        $validResponses['400'] = [
            'message'   => 'Invalid status value',
            'assertsOutput'  => $assertsOutput
        ];

        if (isset($validResponses[$output->responseCode])) {
            // Get the response type indicated by the business logic
            $response = $validResponses[$output->responseCode];
        } elseif (isset($validResponses['default'])) {
            $response = $validResponses['default'];
        } else {
            // We don't recognize this reponse type from the spec
            return new Response($output->data, $output->responseCode);
        }

        // Check if we have a schema defined for the response type
        if (!empty($response['assertsOutput'])) {
            // Validate response type
            $this->validateData($output->data, $response['assertsOutput']);
        }

        // Determine what to return as the response
        if (!empty($output->data)) {
            $responseData = $this->produceOutput($request, $output->data);
        } else {
            $responseData = $response['message'];
        }

        // Return response
        return new Response($responseData, $output->responseCode);
    }
    /**
     * Operation findPetsByTags
     * Finds Pets by tags.
     *
     * @return \Model\Pet[]
     */
    public function findPetsByTags(Request $request)
    {
        $inputData = [];
        // Unwrap parameter value
        $inputData['tags'] = $request->query->get('tags');

        $asserts = [];

        $asserts[] = new Assert\All([
            new Assert\Type("string[]")
        ]);

        // Validate input parameter
        $this->validateData($inputData['tags'], $asserts);


        // Call business logic with input data array.
        $output = $this->PetApiService->findPetsByTags($inputData);

        $validResponses = [];

        $assertsOutput = [];

        $assertsOutput[] = new Assert\All([
            new Assert\Type("\Model\Pet[]")
        ]);

        $validResponses['200'] = [
            'message'   => 'successful operation',
            'assertsOutput'  => $assertsOutput
        ];


        $validResponses['400'] = [
            'message'   => 'Invalid tag value',
            'assertsOutput'  => $assertsOutput
        ];

        if (isset($validResponses[$output->responseCode])) {
            // Get the response type indicated by the business logic
            $response = $validResponses[$output->responseCode];
        } elseif (isset($validResponses['default'])) {
            $response = $validResponses['default'];
        } else {
            // We don't recognize this reponse type from the spec
            return new Response($output->data, $output->responseCode);
        }

        // Check if we have a schema defined for the response type
        if (!empty($response['assertsOutput'])) {
            // Validate response type
            $this->validateData($output->data, $response['assertsOutput']);
        }

        // Determine what to return as the response
        if (!empty($output->data)) {
            $responseData = $this->produceOutput($request, $output->data);
        } else {
            $responseData = $response['message'];
        }

        // Return response
        return new Response($responseData, $output->responseCode);
    }
    /**
     * Operation deletePet
     * Deletes a pet.
     *
     * @param int $pet_id Pet id to delete (required)
     */
    public function deletePet(Request $request, $pet_id)
    {
        $inputData = [];
        // Unwrap parameter value
        $inputData['pet_id'] = $pet_id;

        $asserts = [];

        $asserts[] = new Assert\Type("long");

        // Validate input parameter
        $this->validateData($inputData['pet_id'], $asserts);

        // Unwrap parameter value
        $inputData['api_key'] = $request->headers->get('api_key');

        $asserts = [];

        $asserts[] = new Assert\Type("string");

        // Validate input parameter
        $this->validateData($inputData['api_key'], $asserts);


        // Call business logic with input data array.
        $output = $this->PetApiService->deletePet($inputData);

        $validResponses = [];

        $assertsOutput = [];


        $validResponses['400'] = [
            'message'   => 'Invalid ID supplied',
            'assertsOutput'  => $assertsOutput
        ];


        $validResponses['404'] = [
            'message'   => 'Pet not found',
            'assertsOutput'  => $assertsOutput
        ];

        if (isset($validResponses[$output->responseCode])) {
            // Get the response type indicated by the business logic
            $response = $validResponses[$output->responseCode];
        } elseif (isset($validResponses['default'])) {
            $response = $validResponses['default'];
        } else {
            // We don't recognize this reponse type from the spec
            return new Response($output->data, $output->responseCode);
        }

        // Check if we have a schema defined for the response type
        if (!empty($response['assertsOutput'])) {
            // Validate response type
            $this->validateData($output->data, $response['assertsOutput']);
        }

        // Determine what to return as the response
        if (!empty($output->data)) {
            $responseData = $this->produceOutput($request, $output->data);
        } else {
            $responseData = $response['message'];
        }

        // Return response
        return new Response($responseData, $output->responseCode);
    }
    /**
     * Operation getPetById
     * Find pet by ID.
     *
     * @param int $pet_id ID of pet to return (required)
     * @return \Model\Pet
     */
    public function getPetById(Request $request, $pet_id)
    {
        $inputData = [];
        // Unwrap parameter value
        $inputData['pet_id'] = $pet_id;

        $asserts = [];

        $asserts[] = new Assert\Type("long");

        // Validate input parameter
        $this->validateData($inputData['pet_id'], $asserts);


        // Call business logic with input data array.
        $output = $this->PetApiService->getPetById($inputData);

        $validResponses = [];

        $assertsOutput = [];


        $validResponses['200'] = [
            'message'   => 'successful operation',
            'assertsOutput'  => $assertsOutput
        ];


        $validResponses['400'] = [
            'message'   => 'Invalid ID supplied',
            'assertsOutput'  => $assertsOutput
        ];


        $validResponses['404'] = [
            'message'   => 'Pet not found',
            'assertsOutput'  => $assertsOutput
        ];

        if (isset($validResponses[$output->responseCode])) {
            // Get the response type indicated by the business logic
            $response = $validResponses[$output->responseCode];
        } elseif (isset($validResponses['default'])) {
            $response = $validResponses['default'];
        } else {
            // We don't recognize this reponse type from the spec
            return new Response($output->data, $output->responseCode);
        }

        // Check if we have a schema defined for the response type
        if (!empty($response['assertsOutput'])) {
            // Validate response type
            $this->validateData($output->data, $response['assertsOutput']);
        }

        // Determine what to return as the response
        if (!empty($output->data)) {
            $responseData = $this->produceOutput($request, $output->data);
        } else {
            $responseData = $response['message'];
        }

        // Return response
        return new Response($responseData, $output->responseCode);
    }
    /**
     * Operation updatePetWithForm
     * Updates a pet in the store with form data.
     *
     * @param int $pet_id ID of pet that needs to be updated (required)
     */
    public function updatePetWithForm(Request $request, $pet_id)
    {
        $inputData = [];
        // Unwrap parameter value
        $inputData['pet_id'] = $pet_id;

        $asserts = [];

        $asserts[] = new Assert\Type("long");

        // Validate input parameter
        $this->validateData($inputData['pet_id'], $asserts);

        // Unwrap parameter value

        $asserts = [];

        $asserts[] = new Assert\Type("string");

        // Validate input parameter
        $this->validateData($inputData['name'], $asserts);

        // Unwrap parameter value

        $asserts = [];

        $asserts[] = new Assert\Type("string");

        // Validate input parameter
        $this->validateData($inputData['status'], $asserts);


        // Call business logic with input data array.
        $output = $this->PetApiService->updatePetWithForm($inputData);

        $validResponses = [];

        $assertsOutput = [];


        $validResponses['405'] = [
            'message'   => 'Invalid input',
            'assertsOutput'  => $assertsOutput
        ];

        if (isset($validResponses[$output->responseCode])) {
            // Get the response type indicated by the business logic
            $response = $validResponses[$output->responseCode];
        } elseif (isset($validResponses['default'])) {
            $response = $validResponses['default'];
        } else {
            // We don't recognize this reponse type from the spec
            return new Response($output->data, $output->responseCode);
        }

        // Check if we have a schema defined for the response type
        if (!empty($response['assertsOutput'])) {
            // Validate response type
            $this->validateData($output->data, $response['assertsOutput']);
        }

        // Determine what to return as the response
        if (!empty($output->data)) {
            $responseData = $this->produceOutput($request, $output->data);
        } else {
            $responseData = $response['message'];
        }

        // Return response
        return new Response($responseData, $output->responseCode);
    }
    /**
     * Operation uploadFile
     * uploads an image.
     *
     * @param int $pet_id ID of pet to update (required)
     * @return \Model\ApiResponse
     */
    public function uploadFile(Request $request, $pet_id)
    {
        $inputData = [];
        // Unwrap parameter value
        $inputData['pet_id'] = $pet_id;

        $asserts = [];

        $asserts[] = new Assert\Type("long");

        // Validate input parameter
        $this->validateData($inputData['pet_id'], $asserts);

        // Unwrap parameter value

        $asserts = [];

        $asserts[] = new Assert\Type("string");

        // Validate input parameter
        $this->validateData($inputData['additional_metadata'], $asserts);

        // Unwrap parameter value

        $asserts = [];

        $asserts[] = new Assert\Type("\SplFileObject");

        // Validate input parameter
        $this->validateData($inputData['file'], $asserts);


        // Call business logic with input data array.
        $output = $this->PetApiService->uploadFile($inputData);

        $validResponses = [];

        $assertsOutput = [];


        $validResponses['200'] = [
            'message'   => 'successful operation',
            'assertsOutput'  => $assertsOutput
        ];

        if (isset($validResponses[$output->responseCode])) {
            // Get the response type indicated by the business logic
            $response = $validResponses[$output->responseCode];
        } elseif (isset($validResponses['default'])) {
            $response = $validResponses['default'];
        } else {
            // We don't recognize this reponse type from the spec
            return new Response($output->data, $output->responseCode);
        }

        // Check if we have a schema defined for the response type
        if (!empty($response['assertsOutput'])) {
            // Validate response type
            $this->validateData($output->data, $response['assertsOutput']);
        }

        // Determine what to return as the response
        if (!empty($output->data)) {
            $responseData = $this->produceOutput($request, $output->data);
        } else {
            $responseData = $response['message'];
        }

        // Return response
        return new Response($responseData, $output->responseCode);
    }

    private function validateData($data, $asserts)
    {
        $errors = $this->validator->validate($data, $asserts);

        if (count($errors) > 0) {
            $errorsString = (string)$errors;
            throw new BadRequestHttpException($errorsString);
        }
    }

    private function produceOutput(Request $request, $output)
    {
        $accept = $request->headers->has('accept')?$request->headers->get('accept'):'application/json';
        switch ($accept) {
            case 'application/json':
                return $this->serializer->serialize($output, 'json');
            case 'application/xml':
                return $this->serializer->serialize($output, 'xml');
            default:
                throw new BadRequestHttpException('Unsupported return format requested');
        }
    }
}
